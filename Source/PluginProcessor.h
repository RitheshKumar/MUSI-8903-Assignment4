/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Vibrato.h"
#include "PeakProgramMeter.h"


//==============================================================================
/**
*/
class Vibrato2pluginAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    Vibrato2pluginAudioProcessor();
    ~Vibrato2pluginAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    void processBlockBypassed(AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================
  
    AudioParameterFloat* getParamLocal(int index) {
        if(!index) {
            return amplParam;
        }
        else {
            return freqParam;
        }
    }
    
    void setParameterNotifyingHost (int parameterIndex, float newValue);
    float getParameter (int parameterIndex) override;

    //==============================================================================
    
    bool getBypass();
    void setBypass(bool bypass);
    
    void setVibratoParam(CVibrato::VibratoParam_t eParam, float fParamValue);
    float getPeakValue(){ return fPeakValue; }

private:
    //==============================================================================
    AudioParameterFloat *amplParam,
                        *freqParam;
    CVibrato *pVibrato;
    PeakProgramMeter *pPPM;
    
    int iNumChannel = 0;
    ToggleButton * bypassButton;
    DrawableText * bypassInfo;
    bool isBypass;
    bool isSliderParamChange;
    float fFreqValue, fAmpValue,
          fPeakValue;

    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Vibrato2pluginAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
